name: Backend CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      ML_SERVICE_HOST: ml_service
      ML_SERVICE_PORT: 8080
      APP_PORT: 8000

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
      
      - name: Start test environment
        run: docker-compose -f docker-compose.yml up -d postgres
      
      - name: Stop containers
        if: always()
        run: docker-compose down
  
  backend-test:
    name: Test Backend
    runs-on: ubuntu-latest
    env:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: postgres
      ML_SERVICE_HOST: ml_service
      ML_SERVICE_PORT: 8080
      APP_PORT: 8000

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Start test environment
        run: docker-compose -f docker-compose.yml up -d postgres

      - name: Wait for PostgreSQL
        run: |
          timeout 30s bash -c 'until docker-compose exec -T postgres pg_isready; do sleep 2; done'

      - name: Run backend tests
        run: docker-compose --profile tests run backend_tests

      - name: Stop containers
        if: always()
        run: docker-compose down

  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
